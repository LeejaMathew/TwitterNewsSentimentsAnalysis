gettxt <- function(file){
# parse the json file and save to a data frame called tweets.df. Simplify = FALSE ensures that we include      lat/lon information in that data frame.
file.df <- parseTweets(file, simplify = FALSE)
tweet_txt <-subset(file.df, select = "text")
tweet_txt <-file.df$text
# remove retweet entities
tweet_txt = gsub("(RT|via)((?:\\b\\W*@\\w+)+)", "", tweet_txt)
# remove at people
tweet_txt = gsub("@\\w+", "", tweet_txt)
# remove punctuation
tweet_txt = gsub("[[:punct:]]", "", tweet_txt)
# remove numbers
tweet_txt = gsub("[[:digit:]]", "", tweet_txt)
# remove html links
tweet_txt = gsub("http\\w+", "", tweet_txt)
# remove unnecessary spaces
tweet_txt = gsub("[ \t]{2,}", "", tweet_txt)
tweet_txt = gsub("^\\s+|\\s+$", "", tweet_txt)
tweet_txt = gsub("[^0-9a-zA-Z ,./?><:;’~`!@#&*’]","", tweet_txt)
# Perform Sentiment Analysis
# classify emotion
classify(tweet_txt)
}
gettxt("/Users/jc/Desktop/TwitterR/franceKy23.json")
gettxt("/Users/jc/Desktop/TwitterR/franceKy23.json")
saveRDS(sent_df, "/Users/jc/Desktop/TwitterR/emotion2.rds")
test22 <- readRDS("/Users/jc/Desktop/TwitterR/emotion2.rds")
gettxt("/Users/jc/Desktop/TwitterR/franceKy23.json")
gettxt("/Users/jc/Desktop/TwitterR/franceKy23.json")
gettxt("/Users/jc/Desktop/TwitterR/franceKy24.json")
saveRDS(sent_df, "/Users/jc/Desktop/TwitterR/emotion2.rds")
test22 <- readRDS("/Users/jc/Desktop/TwitterR/emotion2.rds")
View(test22)
View(test22)
View(test22)
gettxt("/Users/jc/Desktop/TwitterR/franceKy24.json")
test22 <- readRDS("/Users/jc/Desktop/TwitterR/emotion2.rds")
gettxt <- function(file){
# parse the json file and save to a data frame called tweets.df. Simplify = FALSE ensures that we include      lat/lon information in that data frame.
file.df <- parseTweets(file, simplify = FALSE)
tweet_txt <-subset(file.df, select = "text")
tweet_txt <-file.df$text
# remove retweet entities
tweet_txt = gsub("(RT|via)((?:\\b\\W*@\\w+)+)", "", tweet_txt)
# remove at people
tweet_txt = gsub("@\\w+", "", tweet_txt)
# remove punctuation
tweet_txt = gsub("[[:punct:]]", "", tweet_txt)
# remove numbers
tweet_txt = gsub("[[:digit:]]", "", tweet_txt)
# remove html links
tweet_txt = gsub("http\\w+", "", tweet_txt)
# remove unnecessary spaces
tweet_txt = gsub("[ \t]{2,}", "", tweet_txt)
tweet_txt = gsub("^\\s+|\\s+$", "", tweet_txt)
tweet_txt = gsub("[^0-9a-zA-Z ,./?><:;’~`!@#&*’]","", tweet_txt)
# Perform Sentiment Analysis
# classify emotion
classify(tweet_txt)
}
gettxt("/Users/jc/Desktop/TwitterR/franceKy24.json")
test22 <- readRDS("/Users/jc/Desktop/TwitterR/emotion2.rds")
classify <- function(x){
class_emo = classify_emotion(x, algorithm='bayes', prior=1.0)
# get emotion best fit
emotion <- class_emo[,7]
# substitute NA's by 'unknown'
emotion[is.na(emotion)] = 'unknown'
# classify polarity
class_pol = classify_polarity(x, algorithm='bayes')
# get polarity best fit
polarity = class_pol[,4]
# Create data frame with the results and obtain some general statistics
# data frame with results
sent_df = data.frame(text=x, emotion=emotion,
polarity=polarity, stringsAsFactors=FALSE)
# sort data frame
sent_df = within(sent_df,
emotion <- factor(emotion, levels=names(sort(table(emotion), decreasing=TRUE))))
saveRDS(sent_df, "/Users/jc/Desktop/TwitterR/emotion2.rds")
# Let’s do some plots of the obtained results
# plot distribution of emotions
ggplot(sent_df, aes(x=emotion)) +
geom_bar(aes(y=..count.., fill=emotion)) +
scale_fill_brewer(palette='Dark2') +
labs(x='emotion categories', y='number of tweets') +
ggtitle('Sentiment Analysis of Tweets\n(classification by emotion)') +
theme(plot.title = element_text(size=12, face='bold'))
}
gettxt("/Users/jc/Desktop/TwitterR/franceKy24.json")
test22 <- readRDS("/Users/jc/Desktop/TwitterR/emotion2.rds")
runApp('TWSentimentsDS')
runApp('TWSentimentsDS')
runApp('TWSentimentsDS')
runApp('TWSentimentsDS')
View(test22)
View(test)
View(test22)
runApp('TWSentimentsDS')
atest22 <- readRDS("/Users/jc/Desktop/TwitterR/emotion2.rds")
runApp('TWSentimentsDS')
args <- switch(input$var,
"atest22" = atest22
# "test" = test
)
runApp('TWSentimentsDS')
View(atest22)
View(test)
rm(list=ls())
runApp('TWSentimentsDS')
runApp('TWSentimentsDS')
runApp('TWSentimentsDS')
atest22 <- readRDS("/Users/jc/Desktop/TwitterR/emotion2.rds")
runApp('TWSentimentsDS')
test <- readRDS("/Users/jc/Desktop/TwitterR/emotion.rds")
ded <- readRDS("/Users/jc/Desktop/TwitterR/emotion2.rds")
gettxt("/Users/jc/Desktop/TwitterR/franceKy23.json")
library(RCurl)
library(streamR)
library(sentiment)
library(ggplot2)
gettxt("/Users/jc/Desktop/TwitterR/franceKy23.json")
install.packages("streamR")
install.packages("streamR")
gettxt <- function(file){
# parse the json file and save to a data frame called tweets.df. Simplify = FALSE ensures that we include      lat/lon information in that data frame.
file.df <- parseTweets(file, simplify = FALSE)
tweet_txt <-subset(file.df, select = "text")
tweet_txt <-file.df$text
# remove retweet entities
tweet_txt = gsub("(RT|via)((?:\\b\\W*@\\w+)+)", "", tweet_txt)
# remove at people
tweet_txt = gsub("@\\w+", "", tweet_txt)
# remove punctuation
tweet_txt = gsub("[[:punct:]]", "", tweet_txt)
# remove numbers
tweet_txt = gsub("[[:digit:]]", "", tweet_txt)
# remove html links
tweet_txt = gsub("http\\w+", "", tweet_txt)
# remove unnecessary spaces
tweet_txt = gsub("[ \t]{2,}", "", tweet_txt)
tweet_txt = gsub("^\\s+|\\s+$", "", tweet_txt)
tweet_txt = gsub("[^0-9a-zA-Z ,./?><:;’~`!@#&*’]","", tweet_txt)
# Perform Sentiment Analysis
# classify emotion
classify(tweet_txt)
}
classify <- function(x){
class_emo = classify_emotion(x, algorithm='bayes', prior=1.0)
# get emotion best fit
emotion <- class_emo[,7]
# substitute NA's by 'unknown'
emotion[is.na(emotion)] = 'unknown'
# classify polarity
class_pol = classify_polarity(x, algorithm='bayes')
# get polarity best fit
polarity = class_pol[,4]
# Create data frame with the results and obtain some general statistics
# data frame with results
sent_df = data.frame(text=x, emotion=emotion,
polarity=polarity, stringsAsFactors=FALSE)
# sort data frame
sent_df = within(sent_df,
emotion <- factor(emotion, levels=names(sort(table(emotion), decreasing=TRUE))))
saveRDS(sent_df, "/Users/jc/Desktop/TwitterR/emotion2.rds")
# Let’s do some plots of the obtained results
# plot distribution of emotions
ggplot(sent_df, aes(x=emotion)) +
geom_bar(aes(y=..count.., fill=emotion)) +
scale_fill_brewer(palette='Dark2') +
labs(x='emotion categories', y='number of tweets') +
ggtitle('Sentiment Analysis of Tweets\n(classification by emotion)') +
theme(plot.title = element_text(size=12, face='bold'))
}
gettxt("/Users/jc/Desktop/TwitterR/franceKy23.json")
test <- readRDS("/Users/jc/Desktop/TwitterR/emotion2.rds")
ded <- readRDS("/Users/jc/Desktop/TwitterR/emotion.rds")
gettxt("/Users/jc/Desktop/TwitterR/franceKy24.json")
test <- readRDS("/Users/jc/Desktop/TwitterR/emotion2.rds")
runApp('TWSentimentsDS')
gettxt("/Users/jc/Desktop/TwitterR/franceKy24.json")
runApp('TWSentimentsDS')
gettxt("/Users/jc/Desktop/TwitterR/franceKy23.json")
classify <- function(x){
class_emo = classify_emotion(x, algorithm='bayes', prior=1.0)
# get emotion best fit
emotion <- class_emo[,7]
# substitute NA's by 'unknown'
emotion[is.na(emotion)] = 'unknown'
# classify polarity
class_pol = classify_polarity(x, algorithm='bayes')
# get polarity best fit
polarity = class_pol[,4]
# Create data frame with the results and obtain some general statistics
# data frame with results
sent_df = data.frame(text=x, emotion=emotion,
polarity=polarity, stringsAsFactors=FALSE)
# sort data frame
sent_df = within(sent_df,
emotion <- factor(emotion, levels=names(sort(table(emotion), decreasing=TRUE))))
saveRDS(sent_df, "/Users/jc/Desktop/TwitterR/emot.rds")
# Let’s do some plots of the obtained results
# plot distribution of emotions
ggplot(sent_df, aes(x=emotion)) +
geom_bar(aes(y=..count.., fill=emotion)) +
scale_fill_brewer(palette='Dark2') +
labs(x='emotion categories', y='number of tweets') +
ggtitle('Sentiment Analysis of Tweets\n(classification by emotion)') +
theme(plot.title = element_text(size=12, face='bold'))
}
gettxt("/Users/jc/Desktop/TwitterR/starbucksNyc29.json")
runApp('TWSentimentsDS')
test <- readRDS("/Users/jc/Desktop/TwitterR/emotion2.rds")
ded <- readRDS("/Users/jc/Desktop/TwitterR/emotion.rds")
ates <- readRDS("/Users/jc/Desktop/TwitterR/emot.rds")
gettxt("/Users/jc/Desktop/TwitterR/franceKy24.json")
runApp('TWSentimentsDS')
classify <- function(x){
class_emo = classify_emotion(x, algorithm='bayes', prior=1.0)
# get emotion best fit
emotion <- class_emo[,7]
# substitute NA's by 'unknown'
emotion[is.na(emotion)] = 'unknown'
# classify polarity
class_pol = classify_polarity(x, algorithm='bayes')
# get polarity best fit
polarity = class_pol[,4]
# Create data frame with the results and obtain some general statistics
# data frame with results
sent_df = data.frame(text=x, emotion=emotion,
polarity=polarity, stringsAsFactors=FALSE)
# sort data frame
sent_df = within(sent_df,
emotion <- factor(emotion, levels=names(sort(table(emotion), decreasing=TRUE))))
saveRDS(sent_df, "/Users/jc/Desktop/TwitterR/em3t.rds")
# Let’s do some plots of the obtained results
# plot distribution of emotions
ggplot(sent_df, aes(x=emotion)) +
geom_bar(aes(y=..count.., fill=emotion)) +
scale_fill_brewer(palette='Dark2') +
labs(x='emotion categories', y='number of tweets') +
ggtitle('Sentiment Analysis of Tweets\n(classification by emotion)') +
theme(plot.title = element_text(size=12, face='bold'))
}
gettxt("/Users/jc/Desktop/TwitterR/starbucksNyc29.json")
test <- readRDS("/Users/jc/Desktop/TwitterR/em3t.rds")
ded <- readRDS("/Users/jc/Desktop/TwitterR/emotion.rds")
ates <- readRDS("/Users/jc/Desktop/TwitterR/emot.rds")
runApp('TWSentimentsDS')
runApp('TWSentimentsDS')
remove.packages(pkgs, lib)
remove.packages(devtools, lib)
library("devtools", lib.loc="~/Library/R/3.3/library")
remove.packages("devtools", lib="~/Library/R/3.3/library")
library("IRkernel", lib.loc="~/Library/R/3.3/library")
library("IRdisplay", lib.loc="~/Library/R/3.3/library")
remove.packages("IRkernel", lib="~/Library/R/3.3/library")
remove.packages("IRdisplay", lib="~/Library/R/3.3/library")
dt <- read.csv("/Users/jc/Downloads/Datasets/HR_comma_sep.csv")
dt <- dummy.data.frame(dt, names = "sales", sep = ".")
library(dummies)
dt <- dummy.data.frame(dt, names = "sales", sep = ".")
View(dt)
dt$salary<- mapvalues(dt$salary, c("low", "medium", "high"), to = c("1","2","3")) #changes varaibles names to number
library(lmtest)
library(plyr)
dt$salary<- mapvalues(dt$salary, c("low", "medium", "high"), to = c("1","2","3")) #changes varaibles names to number
dt$salary <-factor(dt$salary, levels = c("1","2","3"))
str(dt$salary)
train <- dt[1:14000,]
write.table(dt, file = "trainHRdt.csv", sep = ",", row.names = FALSE)
write.table(train, file = "trainHRdt.csv", sep = ",", row.names = FALSE)
View(train)
shiny::runApp('TWSentimentsDS')
runApp('TWSentimentsDS')
runApp('TWSentimentsDS')
runApp('TWSentimentsDS')
runApp('TWSentimentsDS')
runApp('TWSentimentsDS')
runApp('TWSentimentsDS')
runApp('TWSentimentsDS')
runApp('TWSentimentsDS')
runApp('TWSentimentsDS')
runApp('TWSentimentsDS')
runApp('TWSentimentsDS')
runApp('TWSentimentsDS')
runApp('TWSentimentsDS')
runApp('TWSentimentsDS')
---
#Load Packages Using Pacman
pacman::p_load(twitteR,plyr, httpuv, RCurl, base64enc,devtools,streamR,RJSONIO,stringr,ROAuth)
load("/Users/jc/Desktop/my_oauth.Rdata")
my_oauth$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")) #Authorize Twitter
runApp('TWSentimentsDS')
runApp('TWSentimentsDS')
runApp('TWSentimentsDS')
runApp('TWSentimentsDS')
runApp('TWSentimentsDS')
gettxt("/Users/jc/Desktop/TwitterR/franceKy23.json")
file <- "/Users/jc/Desktop/TwitterR/starbucksNyc29.json"
file.df <- parseTweets(file, simplify = FALSE)
file <- ("/Users/jc/Desktop/TwitterR/starbucksNyc29.json")
file.df <- parseTweets(file, simplify = FALSE)
file.df <- parseTweets("/Users/jc/Desktop/TwitterR/starbucksNyc29.json"), simplify = FALSE)
file.df <- parseTweets("/Users/jc/Desktop/TwitterR/starbucksNyc29.json", simplify = FALSE)
file.df <- parseTweets("/Users/jc/Desktop/TwitterR/starbucksNyc29.json", simplify = FALSE)
tweet_txt <-subset(file.df, select = "text")
tweet_txt <-file.df$text
tweet_txt = gsub("(RT|via)((?:\\b\\W*@\\w+)+)", "", tweet_txt)
tweet_txt = gsub("@\\w+", "", tweet_txt)
tweet_txt = gsub("[[:punct:]]", "", tweet_txt)
tweet_txt = gsub("[[:digit:]]", "", tweet_txt)
tweet_txt = gsub("http\\w+", "", tweet_txt)
tweet_txt = gsub("[ \t]{2,}", "", tweet_txt)
tweet_txt = gsub("^\\s+|\\s+$", "", tweet_txt)
tweet_txt = gsub("[^0-9a-zA-Z ,./?><:;’~`!@#&*’]","", tweet_txt)
classify(tweet_txt)
class_emo = classify_emotion(x, algorithm='bayes', prior=1.0)
class_emo = classify_emotion(tweet_txt, algorithm='bayes', prior=1.0)
View(class_emo)
emotion <- class_emo[,7]
emotion[is.na(emotion)] = 'unknown'
class_pol = classify_polarity(x, algorithm='bayes')
class_pol = classify_polarity(tweet_txt, algorithm='bayes')
View(class_pol)
polarity = class_pol[,4]
sent_df = data.frame(text=x, emotion=emotion,
polarity=polarity, stringsAsFactors=FALSE)
sent_df = data.frame(text=tweet_txt, emotion=emotion,
polarity=polarity, stringsAsFactors=FALSE)
View(sent_df)
View(class_emo)
sent_df2 = within(sent_df,
emotion <- factor(emotion, levels=names(sort(table(emotion), decreasing=TRUE))))
View(sent_df2)
ggplot(sent_df2, aes(x=emotion)) +
geom_bar(aes(y=..count.., fill=emotion)) +
scale_fill_brewer(palette='Dark2') +
labs(x='emotion categories', y='number of tweets') +
ggtitle('Sentiment Analysis of Tweets\n(classification by emotion)') +
theme(plot.title = element_text(size=12, face='bold'))
emotion <- class_emo[,7]
emotion[is.na(emotion)] = NULL
class_emo = classify_emotion(tweet_txt, algorithm='bayes', prior=1.0)
emotion <- class_emo[,7]
emotion[complete.cases(emotion),]
emotion<- emotion[complete.cases(emotion),]
class_emo = classify_emotion(tweet_txt, algorithm='bayes', prior=1.0)
emotion <- class_emo[,7]
class_emo[complete.cases(class_emo),]
emotion <- class_emo[,7]
class_pol = classify_polarity(tweet_txt, algorithm='bayes')
polarity = class_pol[,4]
sent_df = data.frame(text=tweet_txt, emotion=emotion,
polarity=polarity, stringsAsFactors=FALSE)
sent_df2 = within(sent_df,
emotion <- factor(emotion, levels=names(sort(table(emotion), decreasing=TRUE))))
ggplot(sent_df2, aes(x=emotion)) +
geom_bar(aes(y=..count.., fill=emotion)) +
scale_fill_brewer(palette='Dark2') +
labs(x='emotion categories', y='number of tweets') +
ggtitle('Sentiment Analysis of Tweets\n(classification by emotion)') +
theme(plot.title = element_text(size=12, face='bold'))
class_emo<- complete.cases(class_emo)
class_emo = classify_emotion(tweet_txt, algorithm='bayes', prior=1.0)
class_emo<-  class_emo[complete.cases(class_emo),]
emotion <- class_emo[,7]
class_emo = classify_emotion(tweet_txt, algorithm='bayes', prior=1.0)
class_pol = classify_polarity(tweet_txt, algorithm='bayes')
polarity = class_pol[,4]
sent_df = data.frame(text=tweet_txt, emotion=emotion,
polarity=polarity, stringsAsFactors=FALSE)
class_emo = classify_emotion(tweet_txt, algorithm='bayes', prior=1.0)
emotion <- class_emo[,7]
class_pol = classify_polarity(tweet_txt, algorithm='bayes')
polarity = class_pol[,4]
sent_df = data.frame(text=tweet_txt, emotion=emotion,
polarity=polarity, stringsAsFactors=FALSE)
View(sent_df)
ggplot(sent_df2, aes(x=emotion)) +
geom_bar(aes(y=..count.., fill=emotion)) +
scale_fill_brewer(palette='Dark2') +
labs(x='emotion categories', y='number of tweets') +
ggtitle('Sentiment Analysis of Tweets\n(classification by emotion)') +
theme(plot.title = element_text(size=12, face='bold'))+ coord_polar()
sent_df2<-  sent_df2[complete.cases(sent_df2),]
ggplot(sent_df2, aes(x=emotion)) +
geom_bar(aes(y=..count.., fill=emotion)) +
scale_fill_brewer(palette='Dark2') +
labs(x='emotion categories', y='number of tweets') +
ggtitle('Sentiment Analysis of Tweets\n(classification by emotion)') +
theme(plot.title = element_text(size=12, face='bold'))+ coord_polar()
ggplot(data = class_pol) +
geom_point(mapping = aes(x = class_pol, y = POS/NEG)
# Let’s do some plots of the obtained results
# plot distribution of emotions
ggplot(sent_df2, aes(x=emotion)) +
geom_bar(aes(y=..count.., fill=emotion)) +
scale_fill_brewer(palette='Dark2') +
labs(x='emotion categories', y='number of tweets') +
ggtitle('Sentiment Analysis of Tweets\n(classification by emotion)') +
theme(plot.title = element_text(size=12, face='bold'))+ coord_polar()
ggplot(data = class_pol) +
geom_point(mapping = aes(x = class_pol, y = POS/NEG)
ggplot(data = class_pol) +
geom_point(mapping = aes(x = class_pol, y = POS/NEG))
ggplot(data = class_pol) +
geom_point(mapping = aes(x = BEST_FIT, y = POS/NEG))
ggplot(class_pol,aes(POS/NEG))
test_df = data.frame(text=tweet_txt, emotion=emotion,
class_pol, stringsAsFactors=FALSE)
View(test_df)
ggplot(test_df,aes(POS/NEG))
ggplot(test_df,aes(BEST_FIT))
ggplot(test_df$POS.NEG
# Let’s do some plots of the obtained results
# plot distribution of emotions
ggplot(sent_df2, aes(x=emotion)) +
geom_bar(aes(y=..count.., fill=emotion)) +
scale_fill_brewer(palette='Dark2') +
labs(x='emotion categories', y='number of tweets') +
ggtitle('Sentiment Analysis of Tweets\n(classification by emotion)') +
theme(plot.title = element_text(size=12, face='bold'))+ coord_polar()
ggplot(test_df$POS.NEG)
ggplot(sent_df2, aes(x=emotion)) +
geom_bar(aes(y=..count.., fill=emotion)) +
scale_fill_brewer(palette='Dark2') +
labs(x='emotion categories', y='number of tweets') +
ggtitle('Sentiment Analysis of Tweets\n(classification by emotion)') +
theme(plot.title = element_text(size=12, face='bold'))+ coord_polar()
runApp('TWSentimentsDS')
/Users/jc/Projects/TWSentimentsDS/BillOreillyTweets/oreillyKy20.json
/Users/jc/Projects/TWSentimentsDS/BillOreillyTweets/oreillyKy20.json
/Users/jc/Projects/TWSentimentsDS/BillOreillyTweets/oreillyKy20.json
/Users/jc/Projects/TWSentimentsDS/BillOreillyTweets/oreillyKy20.json
/Users/jc/Projects/TWSentimentsDS/FranceElectionsTweets/franceKy23.json
/Users/jc/Projects/TWSentimentsDS/FranceElectionsTweets/franceKy23.json
/Users/jc/Projects/TWSentimentsDS/FranceElectionsTweets/franceKy23.json
/Users/jc/Projects/TWSentimentsDS/FranceElectionsTweets/franceKy23.json
/Users/jc/Projects/TWSentimentsDS/SamsungTweets/samsungKy22.json
/Users/jc/Projects/TWSentimentsDS/SamsungTweets/samsungKy22.json
/Users/jc/Projects/TWSentimentsDS/StarbucksTweets/starbucksMia22.json
/Users/jc/Projects/TWSentimentsDS/StarbucksTweets/starbucksMia22.json
/Users/jc/Projects/TWSentimentsDS/StarbucksTweets/starbucksMia22.json
runApp('TWSentimentsDS')
Oreilly-Kentucky-April20 <- "/Users/jc/Projects/TWSentimentsDS/BillOreillyTweets/oreillyKy20.json"
runApp('TWSentimentsDS')
runApp('TWSentimentsDS')
runApp('TWSentimentsDS')
knitr::opts_chunk$set(echo = TRUE)
“The intercept was estimated as $\hat{\alpha} = 4$”
shiny::runApp('TWSentimentsDS')
install.packages("RgoogleMaps")
install.packages("RgoogleMaps")
library("RgoogleMaps")
MyMap <- GetMap(center = c(lat = 39, lon = -98), size = c(640, 640),
zoom = 4, path = "", sensor = "true",
maptype = c("terrain"),
format = c("png32"),
extraURL = "", RETURNIMAGE = TRUE, GRAYSCALE = FALSE, NEWMAP = TRUE,
SCALE = 1, API_console_key = NULL, verbose = 0)
tmp <- PlotOnStaticMap(MyMap, lat = finaldf$lat,
lon = finaldf$long,
destfile = "MyTile1.png", cex=((finaldf$anger)/finaldf$total)*50,pch=20,
col="red", add=FALSE);
finaldf <- "/Users/jc/Projects/TWSentimentsDS/OreillyResults.rds"
MyMap <- GetMap(center = c(lat = 39, lon = -98), size = c(640, 640),
zoom = 4, path = "", sensor = "true",
maptype = c("terrain"),
format = c("png32"),
extraURL = "", RETURNIMAGE = TRUE, GRAYSCALE = FALSE, NEWMAP = TRUE,
SCALE = 1, API_console_key = NULL, verbose = 0)
MyMap <- GetMap(center = c(lat = 39, lon = -98), size = c(640, 640),
zoom = 4, path = "", sensor = "true",
maptype = c("terrain"),
format = c("png32"),
extraURL = "", RETURNIMAGE = TRUE, GRAYSCALE = FALSE, NEWMAP = TRUE,
SCALE = 1, API_console_key = NULL, verbose = 0)
tmp <- PlotOnStaticMap(MyMap, lat = finaldf$lat,
lon = finaldf$long,
destfile = "MyTile1.png", cex=((finaldf$anger)/finaldf$total)*50,pch=20,
col="red", add=FALSE);
finaldf <- readRDS("/Users/jc/Projects/TWSentimentsDS/OreillyResults.rds")
tmp <- PlotOnStaticMap(MyMap, lat = finaldf$lat,
lon = finaldf$long,
destfile = "MyTile1.png", cex=((finaldf$anger)/finaldf$total)*50,pch=20,
col="red", add=FALSE)
tmp <- PlotOnStaticMap(MyMap, lat = finaldf$lat,
lon = finaldf$long,
destfile = "MyTile1.png", cex=((finaldf$anger)/finaldf$total),pch=20,
col="red", add=FALSE)
tmp <- PlotOnStaticMap(MyMap, lat = finaldf$lat,
lon = finaldf$long,
destfile = "MyTile1.png", cex=((finaldf$anger)/finaldf$total)*5,pch=20,
col="red", add=FALSE)
runApp('TWSentimentsDS')
View(finaldf)
runApp('TWSentimentsDS')
finaldf <- readRDS("/Users/jc/Projects/TWSentimentsDS/BillOreillyMapResults.rds")
runApp('TWSentimentsDS')
runApp('TWSentimentsDS')
runApp('TWSentimentsDS')
runApp('TWSentimentsDS')
runApp("MyApp", display.mode = "showcase")
runApp("app", display.mode = "showcase")
runApp("app.R", display.mode = "showcase")
runApp("app.R", display.mode = "showcase")
runApp("app.R", display.mode = "showcase")
runExample("01_hello")
runApp("app.R", display.mode = "showcase")
runApp("app.R", display.mode = "showcase")
runApp("app.R", display.mode = "showcase")
